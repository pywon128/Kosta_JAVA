데이터베이스 변경 삭제 추가 = execute.update -> 리턴 int
데이터베이스 조회 = execute.query -> 리턴 ResultSet
ResultSet -> next() 메서드로 순차적으로 데이터를 조회함
    값 가져오기 -> getInt, getString ..

프로그램 실행 결과를 출력
=> 컴퓨터 화면 : 휘발성
=> 파일       : 영구저장, 동시에 최신의 정보 공유 X
=> 데이터베이스 : 영구저장, 동시에 최신의 정보 공유 O
    => 자료를 쌓아 놓은 더미

-----------------------------------------------------------------------------------------
데이터베이스 관리 시스템 (DataBase Management System, DBMS)

DBMS 종류
Oracle, MySQL, MsSQL, MariaDB ...

데이터베이스 종류
    관계형 데이터베이스  <-- 대체적으로 많이 사용함
    객체 데이터베이스
    ...

<< 관계형 데이터베이스 >>
오라클은 "관계형 데이터베이스"에 해당함
기업의 정보구조를 여러개의 테이블로 나타냄
각 테이블은 행과 열로 구성되며, 각각의 테이블은 서로 관계가 있도록 만들어짐
관계가 있다라는 말은 두개의 테이블에 공통으로 들어가는 컬럼(속성)이 있는 것

예를들어 부서관리 시스템에서 부서의 정보를 저장하기 위한 부서테이블의 속성으로는
부서번호, 부서명, 부서위치가 있다 가정.
<부서>
부서번호    부서명     부서위치
10         기획팀      판교
20         개발팀      광화문
30         총무팀      광화문
이 부서에 소속된 사월테이블의 속성으로는 사원번호, 사원명, 급여, 부서번호 있음

<사원>
사원번호    사원명     급여      부서번호
1000        A        500        20
1001        B        500        10

이와 같이 두개의 테이블에 부서번호 라는 속성이 공통으로 들어가 있음
이것을 관계에 있다 라고 말함. - 부서가 부모 테이블

이론적으로 관계의 종류도 많이 있지만 학습할 관계는 "주종관계(부모 자식관계)"
두개의 테이블에 데이터가 먼저 들어가야 하는 것을 부모로 봄

<< 데이터베이스 명령어의 종류 >>
1. 데이터 정의어(Data Definition Language)    DDL
    - 테이블이나 개체를 생성, 수정, 삭제 ...
        CREATE, ALTER, DROP
2. 데이터 조작어(Data Manipulation Language)  DML
    - 레코드를 추가, 수정, 삭제, 조회 ...
        INSERT, UPDATE, DELETE, SELECT
3. 데이터 제어어(Data Control Language)       MCL
    - 권한부여(사용자 또는 개체에 대해 생성, 수정 등 특정 작업을 할 수 있도록), 귄한취소 ...
        GRANT, REVOKE


SQL (Structured Query Language - 구조적 질의 언어)

DML( 데이터 조작어 )
insert 레코드의 추가
update 레코드의 수정
delete 레코드의 살제
select 레코드의 조회

<< 데이터 조회 하기 >>
select 컬럼이름(들) from 테이블이름(들) [where 조건식]

연습) 모든 고객의 주소를 조회(검색) => select 주소 from 고객;
연습) '김연아'고객의 주소를 조회 => select address from customer where name='김연아';
연습) '대한미디어'에서 출간하는 도서의 도서명과 가격을 조회
        => select bookname, price from book where publisher='대한미디어';
연습) '대한미디어'에서 출간하는 모든 도서의 도서번호, 도서명, 가격, 출판사를 조회
        => select * from book where publisher='대한미디어';
연습) 모든 출판사목록 출력
        => select publisher from book;
    -> 중복제거 : distinct
    select distinct publisher from book;

<< where 절에 사용할 수 있는 연산자 >>
비교 : >, <, >=. <=, <> or != (같지 않다)
논리 : AND, OR
집합 : IN, NOT IN
범위 : BETWEEN A AND B
null : IS NULL, IS NOT NULL
패턴 : LIKE

연습) 가격이 20000원 이상인 도서의 목록을 출력
    => select * from book where price>=20000;
연습) 출판사가 '굿스포츠'가 아닌 모든 도서목록을 출력
    => select bookname from book where publisher <> '굿스포츠'; // <> 말고 != 써도됨
연습) 2024년 6월 10일에 주문한 도서번호와 고객번호를 출력
    => select bookid, custid from orders where orderdate = '24/06/10';
연습) '이상미디어'에서 출간하는 도서중에 가격이 20000원 이상인 도서번호, 도서명을 출력
    => select bookid, bookname from book where publisher='이상미디어' and price>=20000;
연습) '이상미디어'나 '대한미디어'에서 출간하는 도서의 도서번호, 도서명, 출판사명을 출력
    => select bookid, bookname, publisher from book where publisher='이상미디어' or publisher='대한미디어';
                                                           => publisher in ('이상미디어', '대한미디어');
연습) '이상미디어' 도 아니고 '대한미디어'도 아닌 출판사의 도서번호, 도서명, 출판사명을 출력
    => select bookid, bookname, publisher from book where publisher not in ('이상미디어', '대한미디어');
연습) '이상미디어' 나 '대한미디어' 에서 출간하는 도서중 가격이 20000원 이상인 도서번호, 도서명, 출판사명을 출력
    => select bookid, bookname, publisher from book where publisher in('이상미디어', '대한미디어') and price >= 20000;
연습) 가격이 10000원 이상 20000원 이하인 도서의 도서번호, 도서명, 출판사명, 가격을 검색
    => select * from book where price >= 10000 and price <= 20000;
                                  price between 10000 and 20000;
연습) '대한미디어' 나 '이상미디어'에서 출간하는 도서중에 가격이 10000원 이상 30000원 이하인 도서의 정보를 출력
    => select * from book where publisher in ('이상미디어', '대한미디어') and price >= 10000 and price <= 30000;
                                                                             price between 10000 and 20000;
연습) 전화번호가 null인 고객의 이름, 주소를 출력
    => select name, address from customer where phone is null;
연습) 전화번호가 null이 아닌 고객의 정보를 출력
    => select * from customer where phone is not null;

서점관리 시스템을 위한 3개의 테이블 생성
<도서> => 도서번호, 도서명, 가격, 출판사
<고객> => 고객번호, 고객명, 주소, 전화
<주문> => 주문번호, 고객번호, 도서번호, 주문가격, 주문일

Book(bookid*, bookname, price, publisher)
customer(custid*, name, address, phone)
orders(orderid*, custid+, bookid+, saleprice, orderdate)
* : 기본키, + :참조키
book테이블은 bookid를 주식별자(primary key)로 설정하여 다른 레코드와 구별하도록 함
customer 테이블은 cutid 를 주식별자(primary key)로 설정하여 다른 레코드와 구별하도록 함
orders 테이블은 orderid를 주식별자(primary key)로 설정하여 다른레코드와 구별하도록 함

그리고 orders테이블의 custid는 반드시 customer 테이블에 존재하는 custid가 되도록 설정(참조키 설정)
또, orders 테이블의 bookid는 반드시 bool 테이블에 존재하는 bookid가 되도록 설정함( 참조키 설정 )

< primary ket >
테이블을 만들 때에 다른 레코드와 구별할 수 있는 속성이 필요한데
이것을 "주식별자"라고 하며 주식별자를 설정하기 위하여 primary key로 함

< foreign key >
두개의 테이블을 관계로 설정할 때에 자식테이블의 어떠한 속성을 부모의 "주식별자"를
참조하도록 하기 위하여 사용함.

create table book(
    bookid number primary key,
    bookname varchar2(50),
    price number,
    publisher varchar2(50)
    );

create table customer(
    custid number primary key,
    name varchar2(20),
    address varchar2(20),
    phone varchar2(20)
    );

create table orders(
    orderid number primary key,
    custid number references customer(custid),
    bookid number references book(bookid),
    saleprice number,
    orderdate date
    );

 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 BOOKID                                    NOT NULL NUMBER
 BOOKNAME                                           VARCHAR2(50)    // 한글은 3칸씩
 PRICE                                              NUMBER
 PUBLISHER                                          VARCHAR2(50)
    insert into book values(1, '축구의 역사', 7000, '굿스포츠');
    insert into book(bookid, bookname, publisher, price) values(2, '축구아는 여자', '나무수', 13000);
    insert into book(bookid, bookname, publisher, price) values(3, '축구의 이해', '대한미디어', 22000);
    insert into book(bookid, bookname, publisher, price) values(4, '골프 바이블', '대한미디어', 35000);
    insert into book(bookid, bookname, publisher, price) values(5, '피겨 교본', '굿스포츠', 8000);
    insert into book(bookid, bookname, publisher, price) values(6, '역도 단계별 기술', '굿스포츠', 6000);
    insert into book(bookid, bookname, publisher, price) values(7, '야구의 추억', '이상미디어', 20000);
    insert into book(bookid, bookname, publisher, price) values(8, '야구를 부탁해', '이상미디어', 13000);
    insert into book(bookid, bookname, publisher, price) values(9, '올림픽 이야기', '삼성당', 7500);
    insert into book(bookid, bookname, publisher, price) values(10, 'Olympic Champion', 'Pearson', 13000);

 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 CUSTID                                    NOT NULL NUMBER
 NAME                                               VARCHAR2(20)
 ADDRESS                                            VARCHAR2(20)
 PHONE                                              VARCHAR2(20)

    insert into customer values(1, '박지성', '영국 맨체스터', '010-1111-1111');
    insert into customer values(2, '김연아', '대한민국 서울', '010-2222-2222');
    insert into customer values(3, '장미란', '대한민국 강원도', '010-3333-3333');
    insert into customer values(4, '추신수', '미국 클리블랜드', '010-4444-4444');
    insert into customer values(5, '박세리', '대한민국 대전', '010-5555-5555');
한글은 1글자 표현하기 위해 varchar2(3) 해야지 1글자 임
 => 입력하려는 '대한민국 강원도', '미국 클리블랜드' 는 varchar(20) 으로는 부족함
    => alter table customer modify address varchar2(30);

 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ORDERID                                   NOT NULL NUMBER
 CUSTID                                             NUMBER
 BOOKID                                             NUMBER
 SALEPRICE                                          NUMBER
 ORDERDATE                                          DATE
    박지성이, 축구의 역사를 6000원에 오늘날짜에 주문
    insert into orders values(1,1,1,6000, '2024/06/10');
    insert into orders values(2,1,3,21000, '2024/05/03');
    insert into orders values(3,2,5,8000, '2024/06/03');
    insert into orders values(4,3,6,6000, '2024/06/04');
    insert into orders values(5,4,7,20000, '2024/06/05');
    insert into orders values(6,1,2,12000, '2024/06/06');
    insert into orders values(7,4,8,13000, '2024/06/07');
    insert into orders values(8,3,10,12000, '2024/06/08');
    insert into orders values(9,2,10,7000, '2024/06/08');
    insert into orders values(10,3,8,13000, '2024/06/09');

