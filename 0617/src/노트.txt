연습) 고객 이름별로 주문한 건수를 출력 주문이 없는 고객이름도 출력
    select name, count(o.custid)
    from orders o right outer join customer c
    on o.custid = c.custid
    group by name;

<< select 문의 형식 >>
select 컬럼(들)
from 테이블(들)
[ where 조건식 ]
[ group by 컬럼(들) ]
[ having 조건식 ]
[ order by 컬럼(들) ]

<< outer join 의 형식 >>
from 테이블1 left|right outer join 테이블2
on 조건식
[ group by 컬럼(들) ]
[ having 조건식 ]
[ order by 컬럼 ]


연습) 관리자이름별로 부하직원의 수를 출력 부하직원이 없는 직원의 이름도 출력
    select e1.ename, count(e2.mgr) cnt
    from emp e1 left outer join emp e2
    on e1.eno = e2.mgr
    group by e1.ename;
    -> select m.ename, count(e.ename)
       from emp m left outer join emp e
       on e.mgr = m.eno
       group by m.ename
       order by count(e.ename) desc;

연습) 부서명별로 총직원의 수를 출력하시오. 소속된 직원이 없는 부서명도 출력
    select d.dname, count(e.ename) cnt
    from dept d left outer join emp e
    on e.dno = d.dno
    group by d.dname;

연습) 출판사별로 총주문건수, 총주문금액을 출력, 주문내역이 없는 출판사도 출력
    select publisher, count(o.bookid) cnt, nvl(sum(o.saleprice), 0) sum
    from book b left outer join orders o
    on b.bookid = o.bookid
    group by publisher;
count 함수는 조건을 만족하는 레코드가 하나도 없으면 결과가 0
그 이외의 집계함수(sum, avg, min, max ... ) 들은 조건을 만족하는 레코드가 없으면 결과가 null
null 일 때 다른 값으로 조회
nvl (컬럼, 값)

연습) 도서명별로 총주문건수, 총주문금액을 출력 ( 주문내역이 없는 도서명도 출력 )
    select bookname, count(o.bookid) cnt, nvl(sum(o.saleprice), 0) sum
    from book b left outer join orders o
    on b.bookid = o.bookid
    group by bookname;

연습) 고객명별로 총주문건수, 총주문금액, 평균주문금액, 최고주문금액을 출력 ( 주문내역이 없는 고객명도 출력 )
    select name, count(o.saleprice) cnt, nvl(sum(o.saleprice), 0) sum, nvl(avg(o.saleprice), 0) avg,
    nvl(max(o.saleprice), 0) max
    from customer c left outer join orders o
    on c.custid = o.custid
    group by name
    order by count(o.saleprice) desc, avg(o.saleprice) desc;

<< 3개의 테이블 outer join 하기 >>
select 컬럼(들)
from 테이블1 left outer join 테이블2
on 조건식
left outer join 테이블3
on 조건식

연습) 고객의 이름과 고객이 주문한 도서이름을 출력, 주문이 없는 고객이름도 출력, 고객이름순으로 정렬
    select c.name, nvl(b.bookname, '주문내역없음') bookname
    from customer c left outer join orders o
    on c.custid = o.custid
    left outer join book b
    on b.bookid = o.bookid
    order by c.name;

주문내역이 없는 고객은 '주문내역없음'으로 출력
=> nvl(bookname, '주문내역없음')


<< 3개의 테이블을 outer join 하고 where 의 조건식 사용 >>
select 컬럼(들)
from 테이블1 left outer join 테이블2
on 조건식
left outer join 테이블3
on 조건식
where 조건식

연습) '대한미디어' 나 '이상미디어', '굿스포츠' 의 도서를 구매한 고객의 이름과 출판사명, 주문한 도서명을 출력
            주문이 없는 고객의 이름도 출력하고 고객이름 순으로 출력
    select c.name, b.publisher, b.bookname
    from customer c left outer join orders o
    on c.custid = o.custid
    left outer join book b
    on b.bookid = o.bookid
    where b.publisher in ('대한미디어', '이상미디어', '굿스포츠')
    order by c.name;

    => 주문내역이 없는 고객이름은 출력되지 않음
    => where 는 inner 조인으로 동작하기 때문에 양쪽에 테이블에 모두 만족하는 레코드만 나옴

    select c.name, b.publisher, b.bookname
    from customer c left outer join orders o
    on c.custid = o.custid
    left outer join book b
    on b.bookid = o.bookid
    where b.publisher in ('대한미디어', '이상미디어', '굿스포츠') or b.publisher is null
    order by c.name;

===================================================================================================
<< 서브쿼리 활용 >>
sql 문 안에 포함되는 또 다른 sql문을 말함
    select c.name, b.publisher, b.bookname
    from customer c left outer join orders o
    on c.custid = o.custid
    left outer join (select * from book where publisher in ('대한미디어', '이상미디어', '굿스포츠')) b    // 서브쿼리적용
    on b.bookid = o.bookid
    order by c.name;

    NAME                 PUBLISHER            BOOKNAME
    -------------------- -------------------- --------------------
    김동규
    김민
    김연아               굿스포츠             피겨 교본
    김연아
    김철
    박세리
    박지성               굿스포츠             축구의 역사
    박지성               대한미디어           축구의 이해
    박지성
    장미란
    장미란               굿스포츠             역도 단계별 기술
    장미란               이상미디어           야구를 부탁해
    추신수               이상미디어           야구의 추억
    추신수               이상미디어           야구를 부탁해

===================================================================================================

<< 서브쿼리(중첩질의)의 사용 >>
=> sql문장안에 포함되는 또다른 sql문을 "서브쿼리" 라고 함

연습) 가장 비싼 금액의 도서 조회
    select bookname from book
    wher price = (select max(price)from book)


<< 서브쿼리의 위치 >>
select 절
from 절
where 절

    - 고객과 주문으로 부터 고객이름, 도서번호를 출력
        select name, bookid
        from customer c left outer join orders o
        on c.custid = o.custid;                                     <= A
    - 도서 테이블에 '대한미디어' 나 '이상미디어', '굿스포츠' 의
            출판사명, 도서명, 도서번호를 출력
        select publisher, bookname, bookid
        from book
        where publisher in ('대한미디어' , '이상미디어', '굿스포츠');   <= B

    - A와 B 로 outer join
        select name, publisher, bookname
        from (서브쿼리) A left outer join (서브쿼리) B
        on A.bookid = B.bookid

        select name, publisher, bookname
        from (
            select name, bookid
            from customer c left outer join orders o
            on c.custid = o.custid
        ) A left outer join (
            select publisher, bookname, bookid
            from book
            where publisher in ('대한미디어' , '이상미디어', '굿스포츠')
        ) B
        on A.bookid = B.bookid
        NAME                 PUBLISHER            BOOKNAME
        -------------------- -------------------- --------------------
        박지성               굿스포츠             축구의 역사
        박지성               대한미디어           축구의 이해
        김연아               굿스포츠             피겨 교본
        장미란               굿스포츠             역도 단계별 기술
        추신수               이상미디어           야구의 추억
        추신수               이상미디어           야구를 부탁해
        장미란               이상미디어           야구를 부탁해
        박지성
        장미란
        김연아
        김동규
        김철
        김민
        박세리

    ===================================================================================================
    - 도서와 주문데이블로 부터 출판사가 '대한미디어', '이상미디어', '굿스포츠' 인 고객번호, 도서명, 출판사명을 출력
    select custid, bookname, publisher
    from book b, orders o
    where b.bookid = o.bookid and publisher in ('대한미디어' , '이상미디어', '굿스포츠');

    위의 결과를 from 절의 서브쿼리로 하여 customer 와 outer join

    연습) '대한미디어' 나 '이상미디어', '굿스포츠' 의 도서를 구매한 고객의 이름과 출판사명, 주문한 도서명을 출력
                주문이 없는 고객의 이름도 출력하고 고객이름 순으로 출력

        select name, publisher, bookname
        from customer c left outer join
        (
            select custid, bookname, publisher
            from book b, orders o
            where b.bookid = o.bookid and publisher in ('대한미디어' , '이상미디어', '굿스포츠')
        ) o
        on c.custid = o.custid
        order by name;

        많은 양의 데이터를 검색 할 때에는 서브쿼리가 성능이 더 좋음

    연습) 구매한 내역이 있는 고객의 이름 출력 ( 조인, 서브쿼리 )
        select distinct c.name
        from customer c, orders o
        where c.custid = o.custid;

    - 주문테이블로 부터 고객번호 조회
    select distinct custid from orders;     ==> (1,2,3,4)
    - 고객테이블로 부터 고객번호가 (1,2,3,4)에 해당하는 고객이름 조회
    select name
    from customer
    where custid in
    (
        select distinct custid from orders
    );
    // 서브쿼리의 건수가 여러건일 때는 "다중행연산자"를 사용해야 함

    연습) '대한미디어'의 도서를 구매한 고객의 이름을 출력 (조인, 서브쿼리)
        select distinct name
        from customer c, orders o, book b
        where c.custid = o.custid and b.bookid = o.bookid
        and b.publisher = '대한미디어';

        select name
        from customer
        where name in
        (
            select name
            from customer c, orders o, book b
            where c.custid = o.custid and b.bookid = o.bookid
            and b.publisher = '대한미디어'
        );

        select bookid from book where publisher = '대한미디어';
        select distinct custid from orders where bookid in (select bookid from book where publisher = '대한미디어');

        select name from customer
        where custid in (select distinct custid from orders
            where bookid in (select bookid from book where publisher = '대한미디어'));


    연습) 부하직원이 있는 직원의 이름을 출력 ( 조인, 서브쿼리 )
        select distinct e.ename
        from emp e, emp m
        where e.eno = m.mgr;

        select ename
        from emp
        where eno in (select mgr from emp );

    1) 데이터베이스 명령어의 종류와 각각에 대해 설명
        DDL 데이터 정의어 : 테이블이나 개체를 생성(create) 및 수정(alter) 삭제(drop) 하는 명령어들
        DML 데이터 조작어 : 레코드 생성(insert), 조회(select), 수정(update), 삭제(delete) 하는 명령어들
        DCL 데이터 제어어 : 계정에 권한 부여(grant) 및 회수(revoke) 하는 명령어들
    2) 데이터 조회를 위한 select 문의 형식
        select 컬럼(들)
        from 테이블명(들)
        where 조건식
        group by 컬럼
        having 조건식
        order by 컬럼
    3) where 절에 대하여 설명
        조회하고자 하는 레코드의 조건식  /그룹으로 묶이지 않은 것들에 대한 조건식
    4) group by 절에 대하여 설명
        특정 컬럼의 값의 종류별로 집계함수를 사용할 때 사용 / 그룹으로 묶인 것들에 대한 정렬
    5) having 에 대하여 설명
        group by 절의 결과에 대하여 조건식 / 그룹으로 묶인 것에 대한 조건식
    6) inner join, outer join, self join에 대하여 각각 설명
        inner join : 두개의 테이블에 조건식을 모두 만족하는 레코드를 검색
        outer join : 왼쪽이나 오른쪽에 테이블의 내용은 조건식을 만족하지 않더라도 조회할 때 사용
        self join : 하나의 동일한 테이블에서 다른 속성을 참조할 때 사용
    7) 서브쿼리에 대해 설명
        sql 문 안에 포함되는 또 다른 sql 문을 말함 ()로 묶어 사용하고, select 절, where 절에 올 수 있음
        / 쿼리안에 쿼리문을 사용


    연습) '장미란' 고객의 주문내역 출력
        select name, o.*
        from customer c, orders o
        where c.custid = o.custid
        and name = '장미란';

        select * from orders
        where custid = (select custid from customer where name = '장미란');

        서브쿼리와 조인
        => 동일한 문제 해결을 위하여 서브쿼리나 조인을 사용할 수 있음
        데이터 수가 많을 때는 조인보다는 서브쿼리가 성능이 더 좋음

    연습) '장미란'고객의 총 주문건수, 총주문금액, 평균주문금액을 출력
        select count(o.custid) cnt, nvl(sum(o.saleprice), 0) sum, nvl(avg(o.saleprice), 0) avg
        from orders o
        where custid = (select custid from customer where name = '장미란');

    연습) 고객별 총주문건수, 총주문금액, 평균주문금액을 출력
        주문내역이 없는 사람도 출력하고 총주문건수가 높은순으로 출력
            동일할 때에는 총주문금액이 높은순으로 출력
        select name, count(o.custid) cnt, nvl(sum(o.saleprice), 0) sum, nvl(avg(o.saleprice), 0) avg
        from customer c, orders o
        where c.custid = o.custid
        group by name
        order by count(o.custid) desc, sum(o.saleprice) desc;
        => inner join -> 주문내역이 없는 사람은 안나옴

        select name, count(o.custid) cnt, nvl(sum(o.saleprice), 0) sum, nvl(avg(o.saleprice), 0) avg
        from customer c left outer join orders o
        on c.custid = o.custid
        group by name
        order by count(o.saleprice) desc, sum(o.saleprice) desc;

    연습) '굿스포츠', '대한미디어', '이상미디어' 출판사들의 도서를 구매한 고객들의
            고객별 총 주문건수, 총주문금액, 평균주문금액을 출력
                총주문건수가 높은순으로 출력하고 동일할 때에는 총주문금액이 높은순으로 출력
        select name, count(o.custid) cnt, sum(saleprice) sum, avg(saleprice) avg
        from customer c, orders o, book b
        where c.custid = o.custid and b.bookid = o.bookid
        and b.publisher in ('굿스포츠', '대한미디어', '이상미디어')
        group by name
        order by count(o.custid) desc, sum(saleprice) desc;

        select custid, count(saleprice), sum(saleprice), avg(saleprice)
        from orders where bookid in (select bookid from book where publisher in('굿스포츠', '대한미디어', '이상미디어'))
        group by custid;

        select
            (select name from customer c where c.custid = o.custid) name,
            count(saleprice), sum(saleprice), avg(saleprice)
        from orders o
        where bookid in (select bookid from book where publisher in('굿스포츠', '대한미디어', '이상미디어'))
        group by custid;
        order by count(saleprice) desc, sum(saleprice) desc;

    연습) '굿스포츠', '대한미디어', '이상미디어' 출판사들의 도서를 구매한 고객들의
                고객별 총 주문건수, 총주문금액, 평균주문금액을 출력, 총주문건수가 3건이상인 고객만 출력하고,
                    총주문건수가 높은순으로 출력하고 동일할 때에는 총주문금액이 높은순으로 출력
        select (select name from customer c where c.custid = o.custid) name
            ,count(saleprice) cnt, sum(saleprice) sum, avg(saleprice) avg
        from orders o
        where bookid in (select bookid from book where publisher in ('굿스포츠', '대한미디어', '이상미디어'))
        group by custid
        having count(saleprice) >= 3
        order by count(saleprice) desc, sum(saleprice) desc;


    1) 마당서점의 도서의 총 개수
        select count(bookid) from book;
    2) 마당서점에 도서를 출고하는 출판사의 총 개수
        select count(distinct publisher) from book;
    3) 모든 고객의 이름, 주소
        select name, address from customer;
    4) 2024/06/01 ~ 06/17 사이에 주문받은 도서의 주문번호
        select custid from orders where orderdate between '2024/06/01' and '2024/06/17';
    5) 2024/06/01 ~ 06/17 사이에 주문받은 도서를 제외한 주문번호
        select custid from orders where orderdate > '2024/06/17';
    6) 성이 '김'씨인 고객의 이름과 주소
        select name, address from customer where name like '김%';
    7) 성이 '김'씨 이고 이름이 '아' 로 끝나는 고객의 이름과 주소
        select name, address from customer where name like '김%' and name like '%아';
    8) 주문하지 않은 고객의 이름
        select name
        from customer c left outer join orders o
        on c.custid = o.custid
        where saleprice is null;
        /
        select name from customer
        where
        custid not in
        (select distinct custid from orders);

        select name from customer
        minus
        select name from customer c, orders o
        where c.custid = o.custid;
        /
    9) 주문금액의 총액과 주문의 평균금액
        select sum(o.saleprice) sum, avg(o.saleprice) avg from orders o;
    10) 고객의 이름과 고객별 구매액
        select name, nvl(sum(o.saleprice),0)
        from customer c left outer join orders o
        on c.custid = o.custid
        group by name;
    11) 고객의 이름과 고객이 구매한 도서목록(고객별로 구매한 도서목록)
        select name, bookname
        from customer c, orders o, book b
        where c.custid = o.custid and o.bookid = b.bookid
        group by name, bookname;
        /
        select name, bookname
        from customer c, orders o, book b
        where
        c.custid = o.custid and
        o.bookid = b.bookid
        order by name;
        /

    12) 도서의 가격과 판매가격의 차이가 가장 많은 주문
        select price - saleprice from book b, orders o
        where b.bookid = o.bookid;

        select o.*
        from orders o, book b
        where
        o.bookid = b.bookid and
        price - saleprice = (select max(price-saleprice)
        from orders o, book b
        where o.bookid = b.bookid);

    13) 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
        select name from (select name, avg(saleprice) avg
        from customer c, orders o
        where c.custid = o.custid
        group by name )
        where avg > (select avg(saleprice) from orders);

프로그램 연습) 고객의 이름을 입력받아 고객의 총주문건수, 총주문금액, 평균주문금액을 출력