상속관계에 있을 때
상위클래스의 참조변수가 하위 클래스의 객체를 참조 할 수 있다

참조변수로
- 상위클래스에는 있고 하위클래스에는 없는 메서드를 호출할 수 있다
- 상위클래스에도 있고, 하위클래스에도 있는 메서드를 호출하면 하위클래스에 있는 메서드가 동작
- 상위클래스에는 없고, 하위클래스에 있는 메서드를 호출하려면 하위클래스로 형 변환 한 후에 호출해야 함

---------------------------------------------------------------------------------------------------------------

인터페이스 : 
	인터페이스도 클래스 처럼 새로운 자료형을 만들기 위한 것
	클래스는 다중상속이 되지 않음
	만약 다중상속의 효과를 기대하려면 인터페이스를 이용
	인터페이스는 완전추상의 개념으로 추상메서드와 상수만으로 구성되어야 함.
				     (abstract 생략가능)(final 생략가능)

---------------------------------------------------------------------------------------------------------------
	
<< 클래스 구조 >>
class 클래스이름 {
	맴버변수
	맴버메서드
	클래스변수
	클래스메서드	
	상수
	생성자	
	추상메서드
}

<< 추상 클래스의 사용 >>
abstract class A{
	public abstract void pro();
	public void hello(){
	}
}

class B extends A {
	public void pro(){
	}
}

--------------------------------------------------------------------------------------------------------------

<< 인터페이스 만드는 방법 >>
interface 이름 {
	상수
	추상메서드
}

<< 인터페이스의 사용 >>
interface A {
	public void pro();
}

class B implements A {
	@Overriding
	public void pro(){
	}
}

--------------------------------------------------------------------------------------------------------------
<< 인터페이스 다중 상속 >>
interface A {
	public void pro();
}

interface K {
	public void hello();
}

class B implements A,K {
	@Overriding
	public void pro(){
	}
	@Overriding
	public void hello(){
	}
}

--------------------------------------------------------------------------------------------------------------
abstract class A {
	public abstract void pro();
}

abstract class K {
	public void hello();
}

class B extends A,K {     // 클래스의 다중 상속은 불가능
	@Overriding
	public void pro(){
	}
	@Overriding
	public void hello(){
	}
}

--------------------------------------------------------------------------------------------------------------

<< 한개의 클래스로 부터 상속받고 여러개의 인터페이스 구현하기 >>

class A{
}
interface B{
}
interface C{
}
interface D{
}

class My extends A implements B,C,D{
}

--------------------------------------------------------------------------------------------------------------
// 창(윈도우) 을 표현하기 위한 클래스
class Frame{
}

// 마우스 움직임기능을 가지고 있는 인터페이스
interface MouseListener{
	public void mousePress();
	public void mouseRelease();
	public void mouseClick();
	...	
}

// 키보드 움직임기능을 가지고 있는 인터페이스
interface KeyListener{
	public void keyPress();
	public void keyRelease();
}

// 창 이면서 마우스 움직임 기능과 키보드 움직임 기능을 구현하려면
// 아래와 같이 클래스를 만들 수 있음.
class Grimpan extends Frame implements MouseListener, KeyListener{
	
}

==> 자바는 창(윈도우)에 대한 클래스를 Frame 이라는 이름으로 만들어둠
또한, 마우스 움직임 기능을 위한 클래스와 키보드 움직임과 관련한 클래스를
MouseListener, KeyListener 라는 이름의 인터페이스를 구현해 둠

--------------------------------------------------------------------------------------------------------------

cui : Character User Interface
	=> 컴퓨터와 사용자가 문자(명령어)로 의사소통하는 환경
	
gui : Graphic User Interface
	=> 컴퓨터와 사용자가 그래픽으로 의사소통하는 환경

자바는 gui와 관련하여 " java.awt " 패키지에 관련 클래스와 인터페이스를 제공함

--------------------------------------------------------------------------------------------------------------

final 클래스
- final 클래스는 상속될 수 없음(클래스 구현을 변경하지 않도록 보장하기 위해)

final 메서드
- final 메서드는 하위 클래스에서 오버라이딩할 수 없음(특정 메서드의 동작을 변경하지 않도록 하기 위해 사용)







