네트워크 프로그램
	==> 서로 떨어져 있는 컴퓨터 끼리 통신하기 위한 프로그램
	==> 자바에서는 네트워크 프로그래밍을 위하여 java.net 패키지에 관련 인터페이스와 클래스를 제공

----------------------------------------------------------------------------------------------------------------

ip address
   => 네트워크 상에 있는 특정한 컴퓨터를 식별하기 위한 주소
	내컴퓨터의 ip 주소 확인하기 => ipconfig

port 번호
   => 하나의 컴퓨터에서 여러개의 네트워크 프로그램이 동시에 실행 될 수 있음.
	특정 프로그램을 식별자의 역할

----------------------------------------------------------------------------------------------------------------
통신하는 방식
1. TCP 방식
	=> 현실세계의 전화와 비슷하게 통신하는 방식
	=> 통신을 할 상대방 컴퓨터와 연결이 이루어지고 난 다음에 연결된 회선을 통해
		데이터를 주고 받는 방식
	장점) 신뢰성 높음
	단점) 네트워크 부담이 높음
	=> 자바가 TCP 방식을 위하여 제공하는 클래스
		ServerSocket, Socket

2. UDP 방식
	=> 현실세계의 편지와 비슷하게 통신하는 방식
	=> 통신을 할 상대방 컴퓨터와 연결을 맺지 않고 덮어놓고 데이터를 보내는 방식
	장점) 네트워크 부담 낮음 
	단점) 신뢰성 낮음
	=> UDP 방식을 위해서 자바가 제공하는 클래스
		DatagramSocket, DatagramPacket
-----------------------------------------------------------------------------------------------------------------
Server	: 네트워크상에서 서비스를 제공하는 컴퓨터 혹은 프로그램

Client	: 네트워크상에서 서비스를 제공받는 컴퓨터 혹은 프로그램

<< TCP 방식의 프로그래밍 절차 >>
	Server						Client
1.      Server Socket 생성				 
2. 클라이언트의 접속을 무한 대기상태로 기다림		
3. 						Socket 객체를 생성하여 통신 요청
4. accept 메서드가 호출되어 통신을 수락함
      (Socket 을 반환)
5. 서버와 클라이언트가 각각의 소켓을 통하여 stream 생성
6. 스트림을 통하여 데이터를 주고 받는다.
7. 사용했던 자원을 닫아준다.

<< UDP 방식의 프로그래밍 절차 >>
DatagramPacket 단위로 데이터를 주고 받음
void	receive(DatagramPacket p)
void	send(DatagramPacket p)

   데이터를 받는 쪽                           데이터를 보내는 쪽
   Receiver                                 Sender
1. DatagramSocket 을 생성                    DatagramSocket 을 생성
2. DatagramPacket 을 생성                    DatagramPacket 을 생성
3. receive를 통해서 데이터를 수신              send를 통해 데이터를 전송
4. 사용했던 자원을 닫아준다.                   사용했던 자원을 닫아준다.

----------------------------------------------------------------------------------------------

데이터베이스(Database)
프로그램 실행한 결과를 화면에 출력하고 컴퓨터 전원을 끄면 그 내용은 사라지게 되는데
실행결과를 영구적으로 저장하려면 "파일"에 기록하면 됨
그러나 "파일"은 다음과 같은 단점이 있음
그 "파일"에 대한 이해관계에 있는 사람이 다수일 때 최신의 정보를 공유하기가 어려움
이해관계에 있는 다수의 사람들이 항상 최신의 정보를 공유하기 위해서는 "데이터베이스"를 이용함

DataBase                    <- 데이터를 쌓아 놓은 더미
DataBase Management System  <- DBMS

DBMS 종류 ( 관계형 데이터베이스 )
    1) Oracle
    2) MsSQL
    3) MySQL    <- Oracle 인수
    4) MariaDB
    ...

NoSQL
    문서기반 NoSQL - MongoDB
---------------------------------------------------------------------------------------------
cmd > sqlplus
사용자 이름 > system
암호 > manager

Oracle 사용자 계정을 만드는 명령
CREATE user 사용자이름 identified by 암호;

연결할 수 있는 권한, 리소스를 만들 수 있는 권한, dba 권한을 부여
GRANT connect, resource, dba to 사용자 이름;

C##madang/ madang
create user C##madang identified by madang;
grant connect, resource, dba to c##madang;
연습)
사용자한테 이름, 국어, 영어, 수학을 입력받아 데이터베이스에 저장하는 프로그램을 작성
=> 이렇게 하기 위해서 데이터베이스에 이러한 정보를 기록하기 위한 "테이블"을 만들어야 함

----------------------------------------------------------------------------------------------
테이블 만드는 명령어

CREATE TABLE 테이블이름( 속성명 자료명, 속성명 자료형 ... );

CREATE TABLE student(name varchar2(20), kor number, eng number, math number );

----------------------------------------------------------------------------------------------

테이블에 자료 추가 하는 명령어
INSERT INTO 테이블명 values (값1, 값2, .. );
INSERT INTO student values('홍길동', 100, 100, 70);
문자열 데이터는 홋따옴표로 묶어 줘야 함

----------------------------------------------------------------------------------------------
데이터 조회하는 명령어
SELECT 속성1, 속성2, ... FROM 테이블명;
SELECT name FROM student;
SELECT * FROM student;

----------------------------------------------------------------------------------------------
자바에서 데이터베이스에 연결하는 프로그램
    Java DataBase Connect 프로그램
    => JDBC
<< JDBC 연결 프로그래밍 절차 >>
0. DBMS 드라이버를 오라클 설치된 경로에서 찾아서 IDE에 설정해야 함
1. DBMS 드라이버를 메모리로 로드한다.
    Class.forName("oracle.jdbc.driver.OracleDriver");
2. DB 서버에 연결한다.
    String url = "jdbc:oracle:thin:@localhost:1521:XE";
    String username = "c##madang";
    String password = "madang";
    Connection conn = DriverManager.getConnection(url, username, password);
3. 데이터베이스 명령어 실행 담당자 객체를 생성한다.
    Statement stmt = conn.createStatement();
4. 실행담당자를 통해서 데이터베이스 명령어를 실행한다.
    int re = stmt.executeUpdate(sql);
5. 사용했던 자원을 닫아 준다.
   stmt.close();
   conn.close();

