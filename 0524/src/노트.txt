컬렉션 프레임워크
	배열은 자료형이 같아야 하고, 또 크기가 고정되어 있어
	데이터를 추가, 삭제가 유연하지 않음
	동적 배열 컬렉션 프레임워크를 사용하면 다양한 자료형을 담을 수 있고,
	데이터를 담는 만큼 배열의 크기가 자동으로 늘고 삭제하면 자동으로 줄어듬

Set	: 중복을 허용하지 않는다.
	- HashSet	: 중복 x, 입력한 순서 유지x
	- LinkedHashSet	: 중복 x, 입력한 순서 유지o
	- TreeSet		: 중복 x, 정렬기능있음( 자료형이 같아야 함)

List	: 중복 허용
	- ArrayList, LinkedList 둘다 사용법은 동일하지만,
	ArrayList 는 배열처럼 연속된 메모리로 확보되기 때문에 배열의 중간에 데이터를
	추가하거나 삭제하면 가비지가 만들어지고 새로 메모리 생성
	LinkedList 는 연속된 메모리 x 요소하나씩 연결되어 있음

Map	: 인덱스 대신에 key에 의해 데이터에 접근하는 방식
	- HashMap	: 입력한 순서 유지x
	- LinkedHashMap	: 입력한 순서 유지o
	- TreeMap	: 입력한 키로 정렬


---------------------------------------------------------------------------------------------------------


<< 파일입출력 >>
프로그램 실행한 결과를 화면에 출력하면
컴퓨터가 종료되면 그 결과를 사라지게 됩니다.(휘발성)
만약에 프로그램실행 결과를 영구적으로 보관(저장)하려면 파일을 이용할 수 있다.

프로그램 실행에 필요한 데이터를 키보드로부터 입력받지 않고
파일로 부터 입력 받을 수 있다.

"입출력"은 컴퓨터 메모리 입장에서 "입력"이고 "출력"

프로그램 실행한 결과 즉 메모리의 내용을 파일로 "출력"
파일로 부터 컴퓨터 메모리로 읽어들이기 "입력"

자바는 이러한 "입출력"을 위하여
java.io 패키지에 관련클래스들을 만들어 두었음

---------------------------------------------------------------------------------------------------------

입출력 == Stream

입출력 형태
	- 문자단위의 입출력
		Reader	: 문자단위의 입력을 위한 제일 조상
		Writer	: 문자단위의 출력을 위한 제일 조상
	- 바이트단위의 입출력
		InputStream	: 바이트단위의 입력을 위한 제일 조상
		OutputStream	: 바이트단위의 출력을 위한 제일 조상


입출력(스트림)
==> 스트림
==> 순서가 있는 자료의 흐름
==> 보통, 다른 프로그래밍에서는 출력하려는 대상에 따라
	그것이 파일인가?
	혹은 프린터인가, 네트워크인가에 따라서
	출력 방법이 달라지고 프로그램이 복잡해진다.

	자바에서는 출력대상이 무엇이라도 동일한 방식으로 사용할 수 있도록 만들어 둠
	=> 스트림(Stream)


Class FileWriter
java.lang.Object
	java.io.Writer
		java.io.OutputStreamWriter
			java.io.FileWriter
프로그램 실행한 결과를 문자단위 파일로 출력하려면
Writer의 후손클래스인 FileWriter를 이용할 수 있음















