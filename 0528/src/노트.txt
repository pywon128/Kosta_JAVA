<< 문자열 처리 >>
String      ==> 값을 변경하면 새로운 객체를 생성
StringBuffer ==> 변하는 문자열을 처리하기 좋음, 가비지가 안생김

public class StringAndStringBuffer {
    public static void pro(String data){
        System.out.println(data+"를 처리하였습니다.");
    }
    public static void main(String[] args) {
        StringBuffer cmd = new StringBuffer();
        cmd.append("insert");
        cmd.append(" into");
        cmd.append(" member");

        System.out.println(cmd);
//        pro(cmd);
        // StringBuffer 를 String 으로 변환해야 함
        pro(cmd.toString());
    }
}

<< 예외처리 >>
프로그램 실행중에 발생할 수 있는 예기치 않는 상황에 대한 처리를 말함
배열의 크기가 n이면 사용할 수 있는 인덱스는 0~n-1 까지 입니다.
그 범위가 아닌 인덱스에 접근하는 상황

어떤 수를 0으로 나누는 상황
문법적 오류는 없으나 실행중에 사용자의 입력값이 바람직 하지 않아 발생할 수 있는
예기치 않는 상황을 처리

위의 프로그램은 문법적으로 오휴가 없고 실행시에 만족하는 값을 전달하면

프로그램 실행시에 다음과 같이 두개의 정수를 전달하지 않거나 부적합한 값을 전달하게 되면
프로그램

자바세서는 대부분(일반적으로) 일어날 수 있는 "예외"에 대하여 이미

예를들어 배열의 인덱스 범위를 넘으면 ArrayIndexOutOfBoundsException 객체 자동생성
숫자형식에 맞지 않으면 NumberFormatException 객체가 자동으로 생성됨

<< 예외처리 방법 1>>
try{
    예외가 발생할 만한 문장(들)
} catch (예외클래스명 변수명){
    예외가 발생되었을 때 처리할 명령어(들)
} catch ( 예외클래스명 변수명) {
    // 하나의 try 안에 여러개의 catch 올 수 있음.
}
		try{
			int a = Integer.parseInt(args[0]);
			int b = Integer.parseInt(args[1]);
			int div = a/b;
			System.out.println("나누기 결과 : "+div);
			//System.out.println("작업종료");
		} catch(Exception e){
			System.out.println("나누기할 두 수를 전달 해주세요.");
		}
// 		catch(ArithmeticException e){
//			System.out.println("0으로 나누기 할 수 없음");
//		} 	// Exception 이 이미 모든 예외상황을 처리하기 때문에 Arithmetic Exception 을 사용할 수 없음
			// 이와 같이 catch 절을 여러개 쓸 때에는 하위 예외가 뒤에 올 수 없다.
            // 하위 예외처리가 앞에 오고 대부분 예외의 상위인 Exception 이 뒤에 오면 가능
        finally {
            System.out.println("작업종료");
        }	// 정상작동 하거나 예외가 발생해도 반드시 실행시킬 명령어들

정상적으로 동작하는 경우 = try 안의 맨 마지막 문장까지 동작함
예외의 상황이 되면 catch 절을 수행하고 try 안의 다음 명령을 동작하지 않음

메서드안에서 예외가 발생하는 경우
1) 메서드 자신이 직접 try~catch로 처리한다.
2) 메서드 호출하는 쪽으로 예외처리를 맡긴다 = throws
예) public static void calcDiv(int a, int b) throws ArithmeticException , ...
                                                    , 로 예외처리들을 적어줌
    	public static void main(String[] args)
    	{
    		try{
    			calcDiv(4,2);
    			calcDiv(4,0);
    		}
    		catch (ArithmeticException e){
    			System.out.println("예외발생 : "+e);
    			// e = >  java.lang.ArithmeticException: / by zero
    			// e.getMessage() => by zero
    			e.printStackTrace();
    			// 예외가 발생하면 어디에서 문제가 발생하였는지 추적해 가면서 정보를 출력해 줌
    		}
    	}


예외처리
==> 프로그램 코드에는 문제가 없어 컴파일 및 실행되지만 프로그램 실행중에 사용자의
    부주의 등으로 인해 발생할 수 있는 예기치 않는 상황을 "예외" 라고 하며
    그것을 처리하는 것을 "예외처리" 라고 함

예외가 발생할 만한 메서드에서 예외처리하는 방법
1) 메서드 자신이 try~catch로 예외처리 한다.
2) 메서드 호출하는 쪽으로 예외처리를 전달한다.

RuntimeException
RuntimeException의 후손들은 특별히 예외처리를 하지 않아도 자바가 예외처리를 해줌
그러나, RuntimeException의 후손이 아닌 예외들은 사용자가 반드시 예외처리를 해 주어야 함
- 파일처리, 네트워크 연결, 데이터베이스 등
    - java.io 에 있는 입출력 관련
    - java.net 에 있는 네트워크관련
    - java.sql 에 있는 데이터베이스 관련

    위에 패키지들에 있는 대부분의 클래스의 생성자와 메서드들은 예외를 가지고 있으며
    그것은 RuntimeException의 후손이 아니여서 반드시 예외처리를 해야 함

<< 사용자 정의 예외 >>
자바는 대부분의 일반적인 예외에 대하여 이미 클래스로 만들어져 있고
그러한 상황이 되면 자동으로 예외 객체를 생성해 줌

그런데 만약 내가 만들고 있는 시스템에서만 특별한 상황이 되면 "예외"로 만들고자 한다면
"사용자 정의 예외"를 만들 수 있고 그러한 상황이 되어도 자바는 예외인줄 모르기 때문에
직접 예외 객체를 생성해야 함
그 때 사용하는 명령이 throw
throw new 사용자 정의예외(); 라고 하여 사용자정의예외 객체를 생성할 수 있다.

물력문으로 메시지를 출력하면 되는데 굳이 사용자정의 예외를 만듦?
-> 만들고자 하는 시스템에서 사용자의 요청에 따라 발생할 수 있는 문제의 상황을 미리 만들어 놓고
    분명하게 하는 것이 목적