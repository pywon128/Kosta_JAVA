객체를 생성하고 맴버변수 값을 초기화 함
-> 생성과 동시에 초기화 방법
 -> 생성자

<< 생성자 만드는 방법 >>
클래스이름과 동일한 이름으로 메서드를 만들어 주고
생성자는 일반 메서드  처럼 호출문에 의해 동작하는 것이 아니기 때문에
리턴 타입을 따로 적지 않음( void x )
class 이름 : Book
생성자 이름 : Book()
매개변수를 갖는 생성자와 갖지않는 생성자 둘다 만들 수 있음
	- 생성자는 중복해서 만들 수 있음 -
	조건 : 매개변수의 타입이나 개수를 다르게 하거나 순서를 다르게 해야 함.



매개변수를 갖는 생성자 body안에서는 매개변수의 우선순위가 높아서
맴버변수 이름과 매개변수 이름이 동일하면 맴버변수 값이 바뀌지 않음
-> this를 붙여서 값을 설정해줘야 함
Book(String a, String b){
	this.a(맴버변수) = a(매개변수);
	this.b = b;
}

<< this >>
생성자나 메서드의 매개변수 이름을 의미 있는 이름으로 정해주다 보면
맴버변수명과 겹치게 됩니다. 이때 맴버 자신을 구별할 목적으로 this를 사용함

<this ( ) >>
생성자가 중복 정의 되어 있을 때 생성자 안에서 생성자 호출 가능
this()는 반드시 그 생성자의 첫 번째에 위치해야 함
==> () 안에 값 대입


<< 기본생성자 >>
매개변수를 하나도 갖지 않는 생성자를 말하며
사용자가 생성자를 만들지 않으면 자바가 "기본생성자"를 제공 하며
각각 자료형에 따라 초기화 해줌
	참조자료형은 null
	int 0, double 0.0, boolean false, ...

그러나, 사용자가 생성자를 한개라도 만들기 시작하면 더 이상 "기본생성자"를 제공하지 않음
필요하다면 사용자가 직접 만들어서 사용해야 함.


toString()
자바의 제일 조상인 Object의 메서드이며
객체의 속성값을 출력하고자 한다면
toString을 자신에 맞게 만들어서 사용할 수 있다.
    @Override
    public String toString() {
        return "PersonB{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
        PersonB p1 = new PersonB("홍길동", 20);
        PersonB p2 = new PersonB("김유신", 21);

        System.out.println(p1);  //PersonB@2f4d3709
        System.out.println(p2);  //PersonB@4e50df2e
	// toString을 재정의 하지 않았을 때
        
        // toString 을 만들어 정의 후에는 아래와 같이 나옴
//        PersonB{name='홍길동', age=20}
//        PersonB{name='김유신', age=21}

        // print(p1) = print(p1.toString)



<< 클래스변수와 클래스 메서드 >>
클래스 변수는 맴버변수명 앞에 static 키워드가 붙은 변수를 말하며
모든 객체가 공동으로 사용할 기억공간이 필요하거나 객체와 무관하게 사용할 수 있는 변수.

클래스 메서드는 맴버메서드 명 앞에 static 키워드가 붙은 메서드를 말함
객체와 무관하게 사용할 수 있는 메서드 ( 별도의 메모리 공간에 잡힘,
				객체를 생성할 때 마다 생기는게 아니라 공통으로 하나 생성 )

class Family{
	private String name;	// 객체 맴버 변수
	private int age;		// ..

	public void pro(){		// 객체 클래스

	}
}

위의 클래스에서 name과 age는 클래스의 맴버변수이며
반드시 객체를 생성해야만 사용할 수 있고 또 객체마다 별도의 메모리 공산이 잡힘

pro() 메서드 역시 반드시 객체를 생성하고 그 객체를 통해서 호출 가능

근데 객체와 무관하게 사용하고자 하는 변수가 필요하다면
변수이름 앞에 static 키워드를 붙여 변수를 만들게 되면 객체와 무관하게 또,
모든 객체가 동일한 기억장소로 사용할 수 있다.
객체와 무관하게 사용해야 하기 때문에 클래스 이름을 통해 접근
클래스 변수, 클래스 메서드 라고 함

static 으로 선언된 변수나 메서드는 static 으로 선언된 변수와 메서드에만 접근 가능


























